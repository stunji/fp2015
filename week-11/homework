listToNumber :: [Int] -> Int
listToNumber [] = error "Empty List"
listToNumber [x] = x
listToNumber xs = number 0 xs
    where
	number result [x] = result * 10 + x
	number result (x:xs) = number (result*10 + x) xs

suffix :: (Eq a) => [a] -> [a] -> Bool
suffix [] _ = True
suffix _ [] = False
suffix xs ys = last xs == last ys && suffix (init xs) (init ys)

occurences :: [Int] -> [Int] -> [Int]
occurences [] _ = []
occurences (x:l1) l2 = find x l2 : occurences l1 l2
    where
	find :: Int->[Int]->Int
	find _ [] = 0
	find x (y:ys)
	    | x == y = 1 + find x ys
	    | otherwise = find x ys

removeAt :: Int -> [a] -> [a]
removeAt ind l
    | ind < 0 || ind >= length l = error "Index out of bounds"
    | otherwise = take ind l ++ drop (ind + 1) l
