#lang racket
(require
  "fence.rkt")

(require
  "binary.rkt")

(require
  "labupr3.rkt")

(define (nth-beast-number n)
  (string->number (string-repeat "666" n)))

(define (count1 n)
  (define (helper i res)
    (cond
      [(= (quotient i 10) 0) (+ res (remainder i 10))]
      [(= (remainder i 10) 1) (helper (quotient i 10) (+ res 1))]
      [(= (remainder i 10) 0) (helper (quotient i 10) res)]))
  (helper (string->number (number->string n 2)) 0))

(define (next-hack n)
  (define (helper i)
    (if (and (> i n) (palindrome? (string->number (number->string i 2))) (odd? (count1 (string->number (number->string i 2)))))
        i
        (helper (+ i 1))))
  (helper 0))

(define (p-score n)
  (define (helper i res)
    (if (palindrome? i)
        (+ res 1)
        (helper (+ i (reverse-int i)) (+ res 1))))
  (helper n 0))
