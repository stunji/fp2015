#lang racket
(define (series a b n)
  (define (series-iter a b i)
    (if (> i n)
        b
        (series-iter b (+ a b) (+ i 1))))
  (cond
    [(= n 1) a]
    [(= n 2) b]
    [else (series-iter a b 3)]))

(define (lucas n)
  (series 2 1 n))

(define (fibonacci n)
  (series 1 1 n))

(define (summed-member n)
  (+ (lucas n) (fibonacci n)))

(define (nth-lucas-sum n)
  (define (helper i res)
    (if (> i n)
        res
        (helper (+ i 1) (+ res (lucas i)))))
  (helper 1 0))

(define (nth-fibonacci-sum n)
  (define (helper i res)
    (if (> i n)
        res
        (helper (+ i 1) (+ res (fibonacci i)))))
  (helper 1 0))

(define (lucas-fib-diff n)
  (- (lucas n) (fibonacci n)))
